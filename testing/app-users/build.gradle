import com.enonic.uitest.server.ServerInstance

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            jcenter()
        }
    }

    dependencies {
        classpath 'com.moowork.gradle:gradle-gulp-plugin:0.13'
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'com.moowork.node' version '0.13'
    id 'com.moowork.gulp' version '0.13'
}

configurations {
    distro
}

ext {
    xpVersion = '6.13.0-SNAPSHOT'
    unpackDir = "$buildDir${File.separator}install"
    screenshotsDir = "$buildDir${File.separator}screenshots"
    reportsDir = "$buildDir${File.separator}reports"
    distroDir = "$unpackDir${File.separator}enonic-xp-$xpVersion"
    deployDir = "$distroDir${File.separator}home${File.separator}deploy"
//    allureResultsDir = "$buildDir${File.separator}allure-results"
    allureResultsDir = "allure-results"
    xpHome = "$distroDir${File.separator}home"
    xpServer = new ServerInstance()
}

dependencies {
    compile "com.enonic.xp:core-api:$xpVersion"
    distro "com.enonic.xp:distro:$xpVersion@zip"
}

task deleteFolders( type: Delete ) {
    delete unpackDir, screenshotsDir, reportsDir
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task zipScreenshots( type: Zip ) {
    from screenshotsDir
    include '*'
    include '*/*'
    archiveName 'userAppTestScreenshots.zip'
}

task zipAllure( type: Zip ) {
    from allureResultsDir
    include '*'
    include '*/*'
    archiveName 'userAppTestAllureResults.zip'
}

artifacts {
    archives zipScreenshots
    archives zipAllure
}

task startServer( dependsOn: unpackDistro ) {
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.startupDelay = 40000
        xpServer.start()
    }
}

task stopServer {
    doLast {
        xpServer.stop()
    }
    finalizedBy zipScreenshots, zipAllure
}

tasks.withType( Test ) {
    jvmArgs '-Xms128m', '-Xmx1024m'
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        displayGranularity = 0
    }
}

task testApp( type: GulpTask, dependsOn: [npmInstall, startServer] ) {
    inputs.files fileTree( dir: '.' )
    outputs.files fileTree( dir: '/test-results' )
    args = ['test']
    startServer.mustRunAfter npmInstall
    finalizedBy stopServer
}

task testAppLocally( type: GulpTask, dependsOn: [npmInstall] ) {
    inputs.files fileTree( dir: '.' )
    outputs.files fileTree( dir: '/test-results' )
    args = ['test']
}
